<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
	<!--
          NeHe Tutorial 11
          Original:  http://http://nehe.gamedev.net/tutorial/flag_effect_(waving_texture)/16002/

          @author: rkwright@geofx.com
      -->

	<title>NEHE Tutorial 11</title>
	<meta http-equiv="content-type" content="text/html; charset=UTF-8"/>

	<!-- The following meta line optimizes the site for mobile devices. It sets the viewport size
    to the screen size, so it will be displayed maximized, but unscaled. -->
	<meta name="viewport" content="width=768, height=1024"/>
	<link rel="stylesheet" type="text/css" href="../css/NeHe.css" />

	<!-- Include several libraries from THREE.js and the Scene class  -->
	<script src="../js/three.js" type="text/javascript"></script>
	<script src="../js/Detector.js" type="text/javascript"></script>
	<script src="../js/OrbitControls-Touch.js" type="text/javascript"></script>
	<script src="../js/Stats.js" type="text/javascript"></script>
	<script src="../js/gfx-scene.js" type="text/javascript"></script>

	<!-- the shaders -->
	<script id="vertexShader" type="x-shader/x-fragment">
			// create two shared variable for the VS and FS containing the normal and the uv coords
			varying vec2 		vUv;
			attribute float  	displacement;
			uniform float    	amplitude;

			void main() {

				// set the variables passed (behind the scenes) by three.js to our
				// "varying" variables, which makes them available to the other shader
				vUv = uv;

				// find the position of the vertex as a function of its current position
				// and the displacement * amplitude - which makes it wave
				vec3 newPosition = position + normal * vec3(displacement * amplitude);

				gl_Position = projectionMatrix * modelViewMatrix * vec4(newPosition, 1.0);
			}
    </script>

	<script id="fragmentShader" type="x-shader/x-vertex">
			// create the shared variables. which are set in the vertex shader
			varying vec2 		vUv;
			uniform sampler2D 	texImage;

			void main(void) {

				gl_FragColor = texture2D(texImage, vUv);
			}
	</script>

</head>
<body>
<script> <![CDATA[
	var uniforms;
	var texture;
	var frameCounter = 0;

	// allocate the Scene object, request orbitControls, 3D axes 10 units high and the stats
	var gfxScene = new GFX.Scene( {
        cameraPos : [0, 2, 20],
        canvasWidth : 768,
		canvasHeight : 1024,
		axesHeight:10,
		controls:true,
		displayStats:true });

	// then initialize our demo's stuff
	initializeDemo();

	// Animate the scene
	animateScene();

	/**
	 * Initialize the Demo.  This is NeHe #11: http://nehe.gamedev.net/tutorial/flag_effect_%28waving_texture%29/16002/
	 * Create a image mapped texture which is then oscillated (in a sine wave)
	 */
	function initializeDemo() {

		// now go create the mesh
		createMesh();
	}

	function createMesh() {
		// load the image as a texture
		texture = new THREE.ImageUtils.loadTexture("images/Tim.bmp");

		// all we need is a simple planar mesh. 9 by 9 units with 45x45 verticies
		var planeGeometry = new THREE.PlaneBufferGeometry(9,9,45,45);

		// add a uniform for the amplitude and the texture.  These are read-only
		// variables that get passed to our shaders
		uniforms = {
			amplitude:	{ type: 'f', value: 0 },
			texImage:	{ type: 't', value: texture }
		};

		// now populate the array of attributes.  This creates a simple parametric
		// surface with the shape of a sine wave
		// Note that the array MUST be a Float32 because that is what three.js expects.
		var displacement = new Float32Array( 2116 );

		for ( var y=0; y<46; y++ ) {
			for ( var x=0; x<46; x++ ) {
				var sVal = Math.sin((((x/5.0)*40.0)/360.0)*Math.PI*2.0);
				var index = x + 46 * y;
				displacement[index] =  sVal;
			}
		}

		planeGeometry.addAttribute( 'displacement', new THREE.BufferAttribute( displacement, 1 ) );

		// find the shaders
		var vs = document.getElementById("vertexShader").textContent;
		var fs = document.getElementById("fragmentShader").textContent;

		// and create our shader material...
		var shaderMaterial = new THREE.ShaderMaterial({
			uniforms:     	uniforms,	// pass the "uniforms" vars
			side:THREE.DoubleSide,		// want the texture on both sides of the wave
			vertexShader:   vs,			// pointers to the shaders
			fragmentShader: fs
		});

		// finally create the mesh and add it to the scene
		var mesh = new THREE.Mesh( planeGeometry, shaderMaterial);
		gfxScene.add(mesh);
	}

	/**
	 * Animate the scene and call rendering.
	 */
	function animateScene() {

		// Tell the browser to call this function when page is visible
		requestAnimationFrame(animateScene);

		// update the amplitude based on the frame value. Taking the sine merely
		// causes the value to vary from -1..1.  When multiplied by the displacement
		// this causes the the wave to be slowly inverted back and forth
		uniforms.amplitude.value = Math.sin(frameCounter);

		// bump the frame counter
		frameCounter += 0.1;

		// Map the 3D scene down to the 2D screen (render the frame)
		gfxScene.renderScene();
	}
]]> </script>
</body>
</html>
