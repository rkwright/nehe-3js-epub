<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops">
<head>
    <title>NeHe-EPUB-08</title>
    <link type="text/css" href="../css/NeHe-EPUB.css" rel="stylesheet"/>
    <link type="text/css" href="../css/prism.css" rel="stylesheet"/>
    <script src="../js/prism.js"></script>
    <meta charset="utf-8"/>
</head>
<body>
<h2>Lesson 8 - Blending and Opacity</h2>


<p>This is a very simple lesson because again three.js does  all the heavy lifting. Still there are a couple of wrinkles to watch for. And, of course, this lesson just barely touches on the whole area of blending, color models, opacity and so on. We'll go a bit deeper later, but for now we'll just get our toes wet.</p>
<p>However, this lesson has a little bit more to it since we are going to start refactoring the code by creating a JavaScript object, gfxScene, that encapsulates all that boilerplate about creating the scene, lights, etc. Let's take a look at the new scene object, then the actual blending.</p>
<p>There are three major parts to the object:</p>
<ul>
  <li>The constructor</li>
  <li>Parsing the parameters</li>
  <li>Initializing the scene</li>
</ul>
<p>The constructor is quite simple, it just declares the member variables, calls the parameter parser then calls initializeScene.</p>

<pre><code class="language-html">GFX.Scene = function ( parameters ) {
	
	this.scene = null;
	this.renderer = null;
	this.camera = null;
    this.containerID = null;

	this.canvasWidth = 0;
	this.canvasHeight = 0;

	this.cameraPos = [0,20,40];

	this.controls = false;
	this.orbitControls = null;

	this.displayStats = false;
	this.stats = null;

	this.ambientLight = null;
    this.pointLight = null;
    this.directionalLight = null;

	this.axisHeight = 0;
	
	this.floorRepeat = 0;
	
	this.fogType = 'none';	// else 'linear' or 'exponential' 
	this.fogDensity = 0;
	this.fogColor = 0xffffff;
	this.fogNear = 0.015;
	this.fogFar = 100;

	this.setParameters( parameters );
    this.initialize();
};</code></pre>

<p>Don't worry about the axis, floor and fog parameters, we'll cover those in a later lesson. The parameter parsing routine was patterned after MrDoob's (originator of three.js).</p>

<pre><code class="language-html">setParameters: function( values ) {
		if ( values === undefined ) return;
	
		for ( var key in values ) {
			var newValue = values[ key ];
	
			if ( newValue === undefined ) {
				console.warn( "NEHE: '" + key + "' parameter is undefined." );
				continue;
			}
            
			if ( key in this ) {
				var currentValue = this[ key ];
	
				if ( currentValue instanceof THREE.Color ) {
					currentValue.set( newValue );
				}
                else if ( currentValue instanceof THREE.Vector3 
                            && newValue instanceof THREE.Vector3 ) {
					currentValue.copy( newValue );
				}
                else if (currentValue instanceof Array) {
                    this[ key ] = newValue.slice();
				}
                else {
                    this[ key ] = newValue;
                }
			}
		}
	},</code></pre>
    
<p>&nbsp;</p>
<p>The lesson is VERY similar to lesson 7 in that we are applying a texture to a cube and using the same keystroke commands for the texture filters and navigation. However, there is only one texture, glass.jpg. And one new command, 'B' which turns on and off the blending.</p>
<p>&nbsp;</p>
<p>And that's it!  Go on to the next page to see the actual rendered demo in all its blended glory!</p>
</body>
</html>